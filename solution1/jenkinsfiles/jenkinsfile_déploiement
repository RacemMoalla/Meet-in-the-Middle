pipeline {
  agent any

  environment {
    KUBE_CONFIG_PATH = credentials('kub-eu') // Assumes you have a Jenkins credential with ID 'kub-eu' containing your kubeconfig
  }
  
  stages {
    stage('Integrate Remote k8s with Jenkins') {
      steps {
        withKubeCredentials(kubectlCredentials: [[
          caCertificate: '', 
          clusterName: 'eur-cluster', 
          contextName: '', 
          credentialsId: 'kub-eu', 
          namespace: 'default', 
          serverUrl: 'https://34.155.234.23'
        ]]) {
          sh 'curl -LO "https://storage.googleapis.com/kubernetes-release/release/v1.20.5/bin/linux/amd64/kubectl"'
          sh 'chmod u+x ./kubectl'
          sh './kubectl get nodes'
        }
      }
    }
    
    stage('Deploy Decision Service') {
      steps {
        withKubeCredentials(kubectlCredentials: [[
          caCertificate: '', 
          clusterName: 'kube-eu', 
          contextName: '', 
          credentialsId: 'kub-eu', 
          namespace: 'default', 
          serverUrl: 'https://34.155.234.23'
        ]]) {
          sh 'curl -LO "https://storage.googleapis.com/kubernetes-release/release/v1.20.5/bin/linux/amd64/kubectl"'
          sh 'chmod u+x ./kubectl'
          
          // Définir l'image Docker à déployer
          script {
            def dockerImage = 'racemmoalla/decision:latest1'
            
            // Créer le fichier YAML de déploiement
            sh '''
            cat <<EOF > deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: decision-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: decision-service
  template:
    metadata:
      labels:
        app: decision-service
    spec:
      containers:
      - name: decision-service
        image: ''' + dockerImage + '''
        ports:
        - containerPort: 5000
EOF
            '''
            
            // Créer le fichier YAML de service LoadBalancer
            sh '''
            cat <<EOF > service.yaml
apiVersion: v1
kind: Service
metadata:
  name: decision-service
spec:
  type: LoadBalancer
  selector:
    app: decision-service
  ports:
  - protocol: TCP
    port: 80
    targetPort: 5000
EOF
            '''
            
            // Appliquer le déploiement et le service
            sh './kubectl apply -f deployment.yaml'
            sh './kubectl apply -f service.yaml'
          }
        }
      }
    }
  
    stage('Retrieve External IP and Update via API') {
        steps {
            script {
                def externalIP = ''
                def attempts = 0
                def maxAttempts = 20
                def sleepTime = 30 // seconds

                while (externalIP == '' && attempts < maxAttempts) {
                    withKubeConfig(credentialsId: 'kub-eu', caCertificate: '', serverUrl: 'https://34.155.234.23') {
                        // Retrieve external IP of decision-service
                        externalIP = sh(script: './kubectl get service decision-service -o=jsonpath="{.status.loadBalancer.ingress[0].ip}"', returnStdout: true).trim()
                        echo "External IP of decision-service: ${externalIP}"
                    }

                    if (externalIP == '' || externalIP=='') {
                        echo "Waiting for external IP to be assigned..."
                        sleep sleepTime
                        sleepTime = 2
                        
                    }
                }

                if (externalIP != null && externalIP != '') {
                    def apiUrl = "34.163.199.27:3000/update-cluster-ip"
                    def payload = "{\"updatedIP\": \"${externalIP}\", \"apply_delay\": \"0\"}" // Modifier apply_delay à 1

                    // Effectuer l'appel API avec curl
                    sh "curl -X POST ${apiUrl} -H 'Content-Type: application/json' -d '${payload}'"
                } else {
                    error "Failed to retrieve external IP after ${maxAttempts} attempts"
                }
            }
        }
    }  
    
   
  }
   post {
    success {
        script {
            sleep(time: 10, unit: 'SECONDS')
            build job: 'check resources', wait: false
            // Générer un délai de sommeil aléatoire entre 100 et 300 secondes
            def random = new Random()
            def sleepTime = 100 + random.nextInt(151) // 100 + (0-150) = 150-200

            // Afficher le délai de sommeil
            echo "Sleeping for 100 seconds before triggering 'charge node' job."

            // Attendre le délai généré
            sleep(time: 100, unit: 'SECONDS')

            // Déclencher le job suivant
            build job: 'charge node'
        }
    }
    }
}
